// bot.js - Telegram –±–æ—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º Minions Game
const { Telegraf } = require('telegraf');
const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const config = {
  botToken: process.env.TELEGRAM_BOT_TOKEN || '7977313799:AAGsf-RCrDZTDZtkdQiVLbLPGWmCG-cgYrU',
  apiUrl: process.env.API_URL || 'http://localhost:3000/api',
  adminIds: (process.env.ADMIN_IDS || '').split(',')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(config.botToken);

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏
const USERS_FILE = path.join(__dirname, 'data', 'users.json');
const STATS_FILE = path.join(__dirname, 'data', 'stats.json');

// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
async function ensureDataDir() {
  try {
    await fs.mkdir(path.join(__dirname, 'data'), { recursive: true });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
async function loadData(filePath, defaultData = {}) {
  try {
    await ensureDataDir();
    const data = await fs.readFile(filePath, 'utf8');
    return JSON.parse(data);
  } catch (err) {
    if (err.code === 'ENOENT') {
      console.log(`–§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...`);
      await fs.writeFile(filePath, JSON.stringify(defaultData));
      return defaultData;
    } else {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
      throw err;
    }
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
async function saveData(filePath, data) {
  try {
    await ensureDataDir();
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª ${filePath}:`, err);
    throw err;
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
function formatLeaderboardMessage(leaderboard, title = '–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ Minions Game') {
  let message = `üèÜ *${title}* üèÜ\n\n`;
  
  leaderboard.slice(0, 10).forEach((player, index) => {
    const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
    message += `${medal} *${player.username}* - ${player.score.toLocaleString()} üçå (–£—Ä–æ–≤–µ–Ω—å ${player.level})\n`;
  });
  
  message += '\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: ' + new Date().toLocaleString();
  
  return message;
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(ctx) {
  const userId = ctx.from.id.toString();
  const username = ctx.from.username || `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`.trim();
  
  try {
    const users = await loadData(USERS_FILE, {});
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (users[userId]) {
      users[userId] = {
        ...users[userId],
        username: username,
        lastActivity: Date.now()
      };
    } else {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      users[userId] = {
        id: userId,
        username: username,
        registered: Date.now(),
        lastActivity: Date.now(),
        hasPlayed: false
      };
    }
    
    await saveData(USERS_FILE, users);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await loadData(STATS_FILE, { totalUsers: 0, activeUsers: 0, totalGames: 0 });
    stats.totalUsers = Object.keys(users).length;
    await saveData(STATS_FILE, stats);
    
    return true;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    return false;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const userId = ctx.from.id.toString();
  
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await registerUser(ctx);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    const startParam = ctx.startPayload;
    if (startParam && startParam.startsWith('ref_')) {
      const referrerId = startParam.replace('ref_', '');
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç ${referrerId}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞
      try {
        await axios.post(`${config.apiUrl}/friends/add`, {
          userId: referrerId,
          friendId: userId
        });
        
        // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        await axios.post(`${config.apiUrl}/friends/add`, {
          userId: userId,
          friendId: referrerId
        });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞:', err);
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name || '–¥—Ä—É–≥'}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Minions Game! –°–æ–±–∏—Ä–∞–π –±–∞–Ω–∞–Ω—ã, –æ—Ç–∫—Ä—ã–≤–∞–π –±–æ–∫—Å—ã –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–∑—å—è–º–∏.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: 'https://t.me/minions_game_bot/app' } }],
          [{ text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥ –ª–∏–¥–µ—Ä–æ–≤', callback_data: 'leaderboard' }]
        ]
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /leaderboard - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
bot.command('leaderboard', async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Å —Å–µ—Ä–≤–µ—Ä–∞
    const response = await axios.get(`${config.apiUrl}/leaderboard`);
    const leaderboard = response.data.global;
    
    if (!leaderboard || leaderboard.length === 0) {
      return ctx.answerCbQuery('–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!');
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    const message = formatLeaderboardMessage(leaderboard);
    
    await ctx.answerCbQuery();
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–∑–µ–π', callback_data: 'friends_leaderboard' }],
          [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: 'https://t.me/minions_game_bot/app' } }]
        ]
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', err);
    ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback 'friends_leaderboard'
bot.action('friends_leaderboard', async (ctx) => {
  const userId = ctx.from.id.toString();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–∑–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
    const response = await axios.get(`${config.apiUrl}/leaderboard/friends/${userId}`);
    const friendsLeaderboard = response.data.friends;
    
    if (!friendsLeaderboard || friendsLeaderboard.length <= 1) {
      await ctx.answerCbQuery('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π –≤ –∏–≥—Ä–µ');
      return ctx.editMessageText('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π –≤ –∏–≥—Ä–µ. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /invite.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì≤ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }],
            [{ text: 'üåé –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'leaderboard' }]
          ]
        }
      });
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –¥—Ä—É–∑–µ–π
    const message = formatLeaderboardMessage(friendsLeaderboard, '–†–µ–π—Ç–∏–Ω–≥ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π');
    
    await ctx.answerCbQuery();
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üåé –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'leaderboard' }],
          [{ text: 'üì≤ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }]
        ]
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥—Ä—É–∑–µ–π:', err);
    ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥—Ä—É–∑–µ–π');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback 'invite'
bot.action('invite', async (ctx) => {
  const userId = ctx.from.id.toString();
  const inviteLink = `https://t.me/minions_game_bot?start=ref_${userId}`;
  
  try {
    await ctx.answerCbQuery();
    await ctx.editMessageText(`üéÆ *–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ Minions Game!* üéÆ\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏—Ö –≤ –∏–≥—Ä—É. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–Ω–∞–Ω—ã!\n\n${inviteLink}`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–π—Ç–∏–Ω–≥—É', callback_data: 'leaderboard' }],
          [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: 'https://t.me/minions_game_bot/app' } }]
        ]
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', err);
    ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö
bot.on('web_app_data', async (ctx) => {
  const userId = ctx.from.id.toString();
  
  try {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp
    const data = JSON.parse(ctx.webAppData.data);
    console.log(`–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    if (data.action === 'get_leaderboard') {
      // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
      const leaderboardResponse = await axios.get(`${config.apiUrl}/leaderboard`);
      const friendsResponse = await axios.get(`${config.apiUrl}/leaderboard/friends/${userId}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ —á–µ—Ä–µ–∑ MainButton
      // (–≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥—Ä—É–≥–æ–π –º–µ—Ö–∞–Ω–∏–∑–º –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö)
      ctx.reply('–î–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –∏–≥—Ä–µ');
    } else if (data.action === 'update_score') {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await axios.post(`${config.apiUrl}/leaderboard/update`, {
        initData: {
          user: {
            id: userId
          }
        },
        userData: {
          id: userId,
          username: ctx.from.username || `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`.trim(),
          level: data.level,
          score: data.score,
          totalBananas: data.totalBananas
        }
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ
      const response = await axios.get(`${config.apiUrl}/leaderboard`);
      const leaderboard = response.data.global;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
      const position = leaderboard.findIndex(player => player.id.toString() === userId) + 1;
      
      ctx.reply(`üèÜ –í–∞—à —Å—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n–ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: ${position}\n–ë–∞–Ω–∞–Ω–æ–≤: ${data.score.toLocaleString()}\n–£—Ä–æ–≤–µ–Ω—å: ${data.level}`);
    } else if (data.action === 'register_achievement') {
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await axios.post(`${config.apiUrl}/achievements/register`, {
        initData: {
          user: {
            id: userId
          }
        },
        userId: userId,
        achievement: data.achievement
      });
      
      ctx.reply(`üéñ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: ${data.achievement.title}`);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö WebApp:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /admin - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
bot.command('admin', async (ctx) => {
  const userId = ctx.from.id.toString();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (!config.adminIds.includes(userId)) {
    return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.');
  }
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await loadData(STATS_FILE, { totalUsers: 0, activeUsers: 0, totalGames: 0 });
    const users = await loadData(USERS_FILE, {});
    
    // –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    const sevenDaysAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);
    const activeUsers = Object.values(users).filter(user => user.lastActivity > sevenDaysAgo).length;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats.activeUsers = activeUsers;
    await saveData(STATS_FILE, stats);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    const message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Minions Game* üìä\n\n` +
      `üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* ${stats.totalUsers}\n` +
      `üë§ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (7 –¥–Ω–µ–π):* ${stats.activeUsers}\n` +
      `üéÆ *–í—Å–µ–≥–æ –∏–≥—Ä:* ${stats.totalGames}\n` +
      `üïí *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${new Date().toLocaleString()}`;
    
    ctx.replyWithMarkdown(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'admin_refresh_leaderboard' }],
          [{ text: 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data: 'admin_export_data' }]
        ]
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback 'admin_refresh_leaderboard'
bot.action('admin_refresh_leaderboard', async (ctx) => {
  const userId = ctx.from.id.toString();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (!config.adminIds.includes(userId)) {
    return ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º');
  }
  
  try {
    await ctx.answerCbQuery('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞...');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    
    ctx.reply('–†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', err);
    ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback 'admin_export_data'
bot.action('admin_export_data', async (ctx) => {
  const userId = ctx.from.id.toString();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (!config.adminIds.includes(userId)) {
    return ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º');
  }
  
  try {
    await ctx.answerCbQuery('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const users = await loadData(USERS_FILE, {});
    const stats = await loadData(STATS_FILE, { totalUsers: 0, activeUsers: 0, totalGames: 0 });
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    const tempFileName = `export_${Date.now()}.json`;
    const tempFilePath = path.join(__dirname, 'data', tempFileName);
    
    const exportData = {
      users: users,
      stats: stats,
      exportDate: new Date().toISOString()
    };
    
    await fs.writeFile(tempFilePath, JSON.stringify(exportData, null, 2));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await ctx.replyWithDocument({ source: tempFilePath });
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await fs.unlink(tempFilePath);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
  const userId = ctx.from.id.toString();
  
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const users = await loadData(USERS_FILE, {});
    
    if (users[userId]) {
      users[userId].lastActivity = Date.now();
      await saveData(USERS_FILE, users);
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
      await registerUser(ctx);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    ctx.reply('üéÆ Minions Game - –°–æ–±–∏—Ä–∞–π –±–∞–Ω–∞–Ω—ã –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–∑—å—è–º–∏!', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: 'https://t.me/minions_game_bot/app' } }],
          [{ text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥ –ª–∏–¥–µ—Ä–æ–≤', callback_data: 'leaderboard' }],
          [{ text: 'üì≤ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }],
          [{ text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'mystats' }]
        ]
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback 'mystats'
bot.action('mystats', async (ctx) => {
  const userId = ctx.from.id.toString();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Å —Å–µ—Ä–≤–µ—Ä–∞
    const response = await axios.get(`${config.apiUrl}/leaderboard`);
    const leaderboard = response.data.global;
    
    // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    const playerData = leaderboard.find(player => player.id.toString() === userId);
    
    if (!playerData) {
      await ctx.answerCbQuery('–í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤ –∏–≥—Ä—É');
      return ctx.editMessageText('–í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤ –∏–≥—Ä—É. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: 'https://t.me/minions_game_bot/app' } }],
            [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    const position = leaderboard.findIndex(player => player.id.toString() === userId) + 1;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    const message = `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ Minions Game* üìä\n\n` +
      `üë§ *–ò–≥—Ä–æ–∫:* ${ctx.from.first_name}\n` +
      `üèÜ *–ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:* ${position} –∏–∑ ${leaderboard.length}\n` +
      `üçå *–ë–∞–Ω–∞–Ω–æ–≤ —Å–æ–±—Ä–∞–Ω–æ:* ${playerData.score.toLocaleString()}\n` +
      `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${playerData.level}\n` +
      `üïí *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* ${new Date(playerData.lastUpdate).toLocaleString()}`;
    
    await ctx.answerCbQuery();
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: 'https://t.me/minions_game_bot/app' } }],
          [{ text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥ –ª–∏–¥–µ—Ä–æ–≤', callback_data: 'leaderboard' }],
          [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞:', err);
    ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback 'back_to_menu'
bot.action('back_to_menu', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    await ctx.editMessageText('üéÆ Minions Game - –°–æ–±–∏—Ä–∞–π –±–∞–Ω–∞–Ω—ã –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–∑—å—è–º–∏!', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: 'https://t.me/minions_game_bot/app' } }],
          [{ text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥ –ª–∏–¥–µ—Ä–æ–≤', callback_data: 'leaderboard' }],
          [{ text: 'üì≤ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }],
          [{ text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'mystats' }]
        ]
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –º–µ–Ω—é:', err);
    ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –º–µ–Ω—é');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
}).catch((err) => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

    
    if (!leaderboard || leaderboard.length === 0) {
      return ctx.reply('–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!');
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    const message = formatLeaderboardMessage(leaderboard);
    
    ctx.replyWithMarkdown(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–∑–µ–π', callback_data: 'friends_leaderboard' }],
          [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: 'https://t.me/minions_game_bot/app' } }]
        ]
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /myfriends - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
bot.command('myfriends', async (ctx) => {
  const userId = ctx.from.id.toString();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–∑–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
    const response = await axios.get(`${config.apiUrl}/leaderboard/friends/${userId}`);
    const friendsLeaderboard = response.data.friends;
    
    if (!friendsLeaderboard || friendsLeaderboard.length <= 1) {
      return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π –≤ –∏–≥—Ä–µ. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /invite.');
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –¥—Ä—É–∑–µ–π
    const message = formatLeaderboardMessage(friendsLeaderboard, '–†–µ–π—Ç–∏–Ω–≥ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π');
    
    ctx.replyWithMarkdown(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üåé –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'leaderboard' }],
          [{ text: 'üì≤ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }]
        ]
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥—Ä—É–∑–µ–π:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥—Ä—É–∑–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /invite - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
bot.command('invite', (ctx) => {
  const userId = ctx.from.id.toString();
  const inviteLink = `https://t.me/minions_game_bot?start=ref_${userId}`;
  
  ctx.replyWithMarkdown(`üéÆ *–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ Minions Game!* üéÆ\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏—Ö –≤ –∏–≥—Ä—É. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–Ω–∞–Ω—ã!\n\n${inviteLink}`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: 'https://t.me/minions_game_bot/app' } }]
      ]
    }
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /mystats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
bot.command('mystats', async (ctx) => {
  const userId = ctx.from.id.toString();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Å —Å–µ—Ä–≤–µ—Ä–∞
    const response = await axios.get(`${config.apiUrl}/leaderboard`);
    const leaderboard = response.data.global;
    
    // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    const playerData = leaderboard.find(player => player.id.toString() === userId);
    
    if (!playerData) {
      return ctx.reply('–í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤ –∏–≥—Ä—É. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: 'https://t.me/minions_game_bot/app' } }]
          ]
        }
      });
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    const position = leaderboard.findIndex(player => player.id.toString() === userId) + 1;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    const message = `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ Minions Game* üìä\n\n` +
      `üë§ *–ò–≥—Ä–æ–∫:* ${ctx.from.first_name}\n` +
      `üèÜ *–ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:* ${position} –∏–∑ ${leaderboard.length}\n` +
      `üçå *–ë–∞–Ω–∞–Ω–æ–≤ —Å–æ–±—Ä–∞–Ω–æ:* ${playerData.score.toLocaleString()}\n` +
      `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${playerData.level}\n` +
      `üïí *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* ${new Date(playerData.lastUpdate).toLocaleString()}`;
    
    ctx.replyWithMarkdown(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: 'https://t.me/minions_game_bot/app' } }],
          [{ text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥ –ª–∏–¥–µ—Ä–æ–≤', callback_data: 'leaderboard' }]
        ]
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback 'leaderboard'
bot.action('leaderboard', async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Å —Å–µ—Ä–≤–µ—Ä–∞
    const response = await axios.get(`${config.apiUrl}/leaderboard`);
    const leaderboard = response.data.global;
